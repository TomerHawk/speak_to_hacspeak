{"config":{"output_file":null,"full_docs":false,"pub_only":false,"reachable_only":false,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/baba/Desktop/rust/speak_to_hacspec","program":"/home/baba/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":[],"output":"/home/baba/Desktop/rust/speak_to_hacspec/target/rls/debug/deps/libabstract_integers-a03f5c712c64bf53.rmeta"},"prelude":{"crate_id":{"name":"abstract_integers","disambiguator":[7108462646840466739,8330533905221249232]},"crate_root":"hacspec/abstract-integers/src","external_crates":[{"file_name":"/home/baba/Desktop/rust/speak_to_hacspec/hacspec/abstract-integers/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[6528836112941390771,2028724122443642861]}},{"file_name":"/home/baba/Desktop/rust/speak_to_hacspec/hacspec/abstract-integers/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[14673858572786541001,1892137737928154225]}},{"file_name":"/home/baba/Desktop/rust/speak_to_hacspec/hacspec/abstract-integers/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[17117278319981904138,16406771668640906211]}},{"file_name":"/home/baba/Desktop/rust/speak_to_hacspec/hacspec/abstract-integers/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11917984669602857069,6489053565454986112]}},{"file_name":"/home/baba/Desktop/rust/speak_to_hacspec/hacspec/abstract-integers/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[12362109612685904499,382626321872987168]}},{"file_name":"/home/baba/Desktop/rust/speak_to_hacspec/hacspec/abstract-integers/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4151571022625212401,1888722734493896023]}},{"file_name":"/home/baba/Desktop/rust/speak_to_hacspec/hacspec/abstract-integers/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[4322023011642103678,14222697504055880771]}},{"file_name":"/home/baba/Desktop/rust/speak_to_hacspec/hacspec/abstract-integers/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[8420579222726968489,9136630199856205157]}},{"file_name":"/home/baba/Desktop/rust/speak_to_hacspec/hacspec/abstract-integers/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[13745492306750544571,5475822973716876235]}},{"file_name":"/home/baba/Desktop/rust/speak_to_hacspec/hacspec/abstract-integers/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[14030493773096865675,2651053314204399788]}},{"file_name":"/home/baba/Desktop/rust/speak_to_hacspec/hacspec/abstract-integers/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[8310449678941769819,14748581810882876583]}},{"file_name":"/home/baba/Desktop/rust/speak_to_hacspec/hacspec/abstract-integers/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[17983290995241619958,6056021938633518527]}},{"file_name":"/home/baba/Desktop/rust/speak_to_hacspec/hacspec/abstract-integers/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[2836549575564442446,8627689666430273126]}},{"file_name":"/home/baba/Desktop/rust/speak_to_hacspec/hacspec/abstract-integers/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[7274711288869898279,15671112109327640352]}},{"file_name":"/home/baba/Desktop/rust/speak_to_hacspec/hacspec/abstract-integers/src/lib.rs","num":15,"id":{"name":"num","disambiguator":[15065600639509072115,11579192261807788052]}},{"file_name":"/home/baba/Desktop/rust/speak_to_hacspec/hacspec/abstract-integers/src/lib.rs","num":16,"id":{"name":"num_bigint","disambiguator":[16408227173904602182,5335273050455605367]}},{"file_name":"/home/baba/Desktop/rust/speak_to_hacspec/hacspec/abstract-integers/src/lib.rs","num":17,"id":{"name":"num_integer","disambiguator":[13284179998591856076,6249734635514743181]}},{"file_name":"/home/baba/Desktop/rust/speak_to_hacspec/hacspec/abstract-integers/src/lib.rs","num":18,"id":{"name":"num_traits","disambiguator":[18363924562698094932,1978752966749199225]}},{"file_name":"/home/baba/Desktop/rust/speak_to_hacspec/hacspec/abstract-integers/src/lib.rs","num":19,"id":{"name":"num_complex","disambiguator":[2690132684299421133,13902043144073155272]}},{"file_name":"/home/baba/Desktop/rust/speak_to_hacspec/hacspec/abstract-integers/src/lib.rs","num":20,"id":{"name":"num_iter","disambiguator":[10681004624086942776,12229775028195941577]}},{"file_name":"/home/baba/Desktop/rust/speak_to_hacspec/hacspec/abstract-integers/src/lib.rs","num":21,"id":{"name":"num_rational","disambiguator":[8933110831882659443,1505698468539763976]}}],"span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":0,"byte_end":2867,"line_start":1,"line_end":71,"column_start":1,"column_end":17}},"imports":[{"kind":"Use","ref_id":{"krate":16,"index":3238},"span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":2665,"byte_end":2672,"line_start":65,"line_end":65,"column_start":15,"column_end":22},"alias_span":null,"name":"BigUint","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":16,"index":1200},"span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":2674,"byte_end":2680,"line_start":65,"line_end":65,"column_start":24,"column_end":30},"alias_span":null,"name":"BigInt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":16,"index":1175},"span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":2690,"byte_end":2694,"line_start":65,"line_end":65,"column_start":40,"column_end":44},"alias_span":null,"name":"Sign","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":18,"index":363},"span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":2696,"byte_end":2706,"line_start":65,"line_end":65,"column_start":46,"column_end":56},"alias_span":null,"name":"CheckedSub","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":18,"index":295},"span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":2708,"byte_end":2712,"line_start":65,"line_end":65,"column_start":58,"column_end":62},"alias_span":null,"name":"Zero","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":15,"index":56},"span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":2714,"byte_end":2720,"line_start":65,"line_end":65,"column_start":64,"column_end":70},"alias_span":null,"name":"traits","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":2742,"byte_end":2743,"line_start":65,"line_end":65,"column_start":92,"column_end":93},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":2,"index":15117},"span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":2764,"byte_end":2777,"line_start":66,"line_end":66,"column_start":19,"column_end":32},"alias_span":null,"name":"ParseIntError","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":2742,"byte_end":2743,"line_start":65,"line_end":65,"column_start":92,"column_end":93},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":2,"index":20100},"span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":2818,"byte_end":2826,"line_start":68,"line_end":68,"column_start":19,"column_end":27},"alias_span":null,"name":"Ordering","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":0,"byte_end":2867,"line_start":1,"line_end":71,"column_start":1,"column_end":17},"name":"","qualname":"::","value":"hacspec/abstract-integers/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":25}],"decl_id":null,"docs":" This crate defines specification-friendly natural integers with an upper bound. Operations on\n these integers can be defined as modular (modulo the upper bound) or regular (with a panic\n on underflow or overflow).","sig":null,"attributes":[{"value":"! This crate defines specification-friendly natural integers with an upper bound. Operations on","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":0,"byte_end":97,"line_start":1,"line_end":1,"column_start":1,"column_end":98}},{"value":"! these integers can be defined as modular (modulo the upper bound) or regular (with a panic","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":98,"byte_end":192,"line_start":2,"line_end":2,"column_start":1,"column_end":95}},{"value":"! on underflow or overflow).","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":193,"byte_end":223,"line_start":3,"line_end":3,"column_start":1,"column_end":31}},{"value":"!","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":224,"byte_end":227,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"! As each integer gets its own Rust type, the compiler detects and prevent any mixing between","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":228,"byte_end":323,"line_start":5,"line_end":5,"column_start":1,"column_end":96}},{"value":"! all the diffent integers you would have defined.","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":324,"byte_end":376,"line_start":6,"line_end":6,"column_start":1,"column_end":53}},{"value":"!","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":377,"byte_end":380,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"! # Defining a new integer type","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":381,"byte_end":414,"line_start":8,"line_end":8,"column_start":1,"column_end":34}},{"value":"!","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":415,"byte_end":418,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"! Here is the macro used to defined the `SizeNatExample` type of this crate:","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":419,"byte_end":497,"line_start":10,"line_end":10,"column_start":1,"column_end":79}},{"value":"!","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":498,"byte_end":501,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"! ```ignore","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":502,"byte_end":515,"line_start":12,"line_end":12,"column_start":1,"column_end":14}},{"value":"! define_abstract_integer_checked!(SizeNatExample, 64);","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":516,"byte_end":573,"line_start":13,"line_end":13,"column_start":1,"column_end":58}},{"value":"! ```","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":574,"byte_end":581,"line_start":14,"line_end":14,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":582,"byte_end":585,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"! `SizeNat` is the name of the newly-created type. `64` is the number of bits of the machine","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":586,"byte_end":680,"line_start":16,"line_end":16,"column_start":1,"column_end":95}},{"value":"! representation of the type. From the number of bits is derived an upper bound for the integer","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":681,"byte_end":778,"line_start":17,"line_end":17,"column_start":1,"column_end":98}},{"value":"! for which all operations are checked for overflow.","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":779,"byte_end":833,"line_start":18,"line_end":18,"column_start":1,"column_end":55}},{"value":"!","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":834,"byte_end":837,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"! The resulting integer type is copyable, and supports addition, substraction, multiplication,","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":838,"byte_end":934,"line_start":20,"line_end":20,"column_start":1,"column_end":97}},{"value":"! integer division, remainder, comparison and equality. The `from_literal` method allows you to","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":935,"byte_end":1032,"line_start":21,"line_end":21,"column_start":1,"column_end":98}},{"value":"! convert integer literals into your new type.","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":1033,"byte_end":1081,"line_start":22,"line_end":22,"column_start":1,"column_end":49}},{"value":"!","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":1082,"byte_end":1085,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"! # Refining an integer type for modular arithmetic","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":1086,"byte_end":1139,"line_start":24,"line_end":24,"column_start":1,"column_end":54}},{"value":"!","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":1140,"byte_end":1143,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"! On top of a previously defined abstract integer, you can define another type that lets you","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":1144,"byte_end":1238,"line_start":26,"line_end":26,"column_start":1,"column_end":95}},{"value":"! implement modular arithmetic. For instance, this crate defines the arithmetic field over the","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":1239,"byte_end":1335,"line_start":27,"line_end":27,"column_start":1,"column_end":97}},{"value":"! 9th Mersenne prime with:","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":1336,"byte_end":1364,"line_start":28,"line_end":28,"column_start":1,"column_end":29}},{"value":"!","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":1365,"byte_end":1368,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"! ```ignore","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":1369,"byte_end":1382,"line_start":30,"line_end":30,"column_start":1,"column_end":14}},{"value":"! define_refined_modular_integer!(","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":1383,"byte_end":1419,"line_start":31,"line_end":31,"column_start":1,"column_end":37}},{"value":"!    SizeNatFieldExample,","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":1420,"byte_end":1447,"line_start":32,"line_end":32,"column_start":1,"column_end":28}},{"value":"!    SizeNatExample,","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":1448,"byte_end":1470,"line_start":33,"line_end":33,"column_start":1,"column_end":23}},{"value":"!    SizeNatExample::pow2(61) - SizeNatExample::from_literal(1)","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":1471,"byte_end":1536,"line_start":34,"line_end":34,"column_start":1,"column_end":66}},{"value":"! );","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":1537,"byte_end":1543,"line_start":35,"line_end":35,"column_start":1,"column_end":7}},{"value":"! ```","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":1544,"byte_end":1551,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":1552,"byte_end":1555,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"! The first argument of this new macro is the name of the newly defined refined type. The second","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":1556,"byte_end":1654,"line_start":38,"line_end":38,"column_start":1,"column_end":99}},{"value":"! argument is the name of the base abstract integer that will act as the representation. The","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":1655,"byte_end":1749,"line_start":39,"line_end":39,"column_start":1,"column_end":95}},{"value":"! third example is the modulo for all operations, defined as a value of the base type.","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":1750,"byte_end":1838,"line_start":40,"line_end":40,"column_start":1,"column_end":89}},{"value":"!","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":1839,"byte_end":1842,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"!","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":1843,"byte_end":1846,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"! # Example","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":1847,"byte_end":1860,"line_start":43,"line_end":43,"column_start":1,"column_end":14}},{"value":"!","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":1861,"byte_end":1864,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":1865,"byte_end":1872,"line_start":45,"line_end":45,"column_start":1,"column_end":8}},{"value":"! use abstract_integers::*;","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":1873,"byte_end":1902,"line_start":46,"line_end":46,"column_start":1,"column_end":30}},{"value":"! ","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":1903,"byte_end":1907,"line_start":47,"line_end":47,"column_start":1,"column_end":5}},{"value":"! abstract_public_nat_mod!(SizeNatFieldExample, SizeNatExample, 64, \"1fffffffffffffff\");","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":1908,"byte_end":1998,"line_start":48,"line_end":48,"column_start":1,"column_end":91}},{"value":"! ","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":1999,"byte_end":2003,"line_start":49,"line_end":49,"column_start":1,"column_end":5}},{"value":"! let x1 = SizeNatExample::from_literal(687165654266415);","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":2004,"byte_end":2063,"line_start":50,"line_end":50,"column_start":1,"column_end":60}},{"value":"! let x2 = SizeNatExample::from_literal(4298832000156);","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":2064,"byte_end":2121,"line_start":51,"line_end":51,"column_start":1,"column_end":58}},{"value":"! let x3 = x1 + x2;","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":2122,"byte_end":2143,"line_start":52,"line_end":52,"column_start":1,"column_end":22}},{"value":"! assert_eq!(SizeNatExample::from_literal(691464486266571), x3);","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":2144,"byte_end":2210,"line_start":53,"line_end":53,"column_start":1,"column_end":67}},{"value":"! let x4 = SizeNatExample::from_literal(8151084996540);","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":2211,"byte_end":2268,"line_start":54,"line_end":54,"column_start":1,"column_end":58}},{"value":"! let x5 = x3 - x4;","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":2269,"byte_end":2290,"line_start":55,"line_end":55,"column_start":1,"column_end":22}},{"value":"! assert_eq!(SizeNatExample::from_literal(683313401270031), x5.into());","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":2291,"byte_end":2364,"line_start":56,"line_end":56,"column_start":1,"column_end":74}},{"value":"! let x6 = x5 / SizeNatExample::from_literal(1541654268);","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":2365,"byte_end":2424,"line_start":57,"line_end":57,"column_start":1,"column_end":60}},{"value":"! assert_eq!(SizeNatExample::from_literal(443233), x6.into());","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":2425,"byte_end":2489,"line_start":58,"line_end":58,"column_start":1,"column_end":65}},{"value":"! let x7 : SizeNatFieldExample = SizeNatFieldExample::from_literal(2305843009213693951) + x6.into();","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":2490,"byte_end":2592,"line_start":59,"line_end":59,"column_start":1,"column_end":103}},{"value":"! assert_eq!(x7, x6.into());","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":2593,"byte_end":2623,"line_start":60,"line_end":60,"column_start":1,"column_end":31}},{"value":"! ```","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":2624,"byte_end":2631,"line_start":61,"line_end":61,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":2632,"byte_end":2635,"line_start":62,"line_end":62,"column_start":1,"column_end":4}}]},{"kind":"Mod","id":{"krate":0,"index":14},"span":{"file_name":"hacspec/abstract-integers/src/abstract_int.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"abstract_int","qualname":"::abstract_int","value":"hacspec/abstract-integers/src/abstract_int.rs","parent":null,"children":[{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":25},"span":{"file_name":"hacspec/abstract-integers/src/nat_mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"nat_mod","qualname":"::nat_mod","value":"hacspec/abstract-integers/src/nat_mod.rs","parent":null,"children":[{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31}],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[],"refs":[{"kind":"Mod","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":2659,"byte_end":2662,"line_start":65,"line_end":65,"column_start":9,"column_end":12},"ref_id":{"krate":15,"index":0}},{"kind":"Mod","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":2659,"byte_end":2662,"line_start":65,"line_end":65,"column_start":9,"column_end":12},"ref_id":{"krate":15,"index":0}},{"kind":"Mod","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":2659,"byte_end":2662,"line_start":65,"line_end":65,"column_start":9,"column_end":12},"ref_id":{"krate":15,"index":0}},{"kind":"Mod","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":2682,"byte_end":2688,"line_start":65,"line_end":65,"column_start":32,"column_end":38},"ref_id":{"krate":15,"index":48}},{"kind":"Mod","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":2659,"byte_end":2662,"line_start":65,"line_end":65,"column_start":9,"column_end":12},"ref_id":{"krate":15,"index":0}},{"kind":"Mod","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":2659,"byte_end":2662,"line_start":65,"line_end":65,"column_start":9,"column_end":12},"ref_id":{"krate":15,"index":0}},{"kind":"Mod","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":2659,"byte_end":2662,"line_start":65,"line_end":65,"column_start":9,"column_end":12},"ref_id":{"krate":15,"index":0}},{"kind":"Mod","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":2659,"byte_end":2662,"line_start":65,"line_end":65,"column_start":9,"column_end":12},"ref_id":{"krate":15,"index":0}},{"kind":"Mod","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":2722,"byte_end":2728,"line_start":65,"line_end":65,"column_start":72,"column_end":78},"ref_id":{"krate":15,"index":56}},{"kind":"Mod","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":2730,"byte_end":2740,"line_start":65,"line_end":65,"column_start":80,"column_end":90},"ref_id":{"krate":18,"index":290}},{"kind":"Mod","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":2754,"byte_end":2757,"line_start":66,"line_end":66,"column_start":9,"column_end":12},"ref_id":{"krate":1,"index":0}},{"kind":"Mod","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":2759,"byte_end":2762,"line_start":66,"line_end":66,"column_start":14,"column_end":17},"ref_id":{"krate":1,"index":3583}},{"kind":"Mod","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":2787,"byte_end":2790,"line_start":67,"line_end":67,"column_start":9,"column_end":12},"ref_id":{"krate":1,"index":0}},{"kind":"Mod","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":2792,"byte_end":2795,"line_start":67,"line_end":67,"column_start":14,"column_end":17},"ref_id":{"krate":2,"index":1944}},{"kind":"Mod","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":2808,"byte_end":2811,"line_start":68,"line_end":68,"column_start":9,"column_end":12},"ref_id":{"krate":1,"index":0}},{"kind":"Mod","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":2813,"byte_end":2816,"line_start":68,"line_end":68,"column_start":14,"column_end":17},"ref_id":{"krate":2,"index":1617}},{"kind":"Mod","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":2837,"byte_end":2849,"line_start":70,"line_end":70,"column_start":9,"column_end":21},"ref_id":{"krate":0,"index":14}},{"kind":"Mod","span":{"file_name":"hacspec/abstract-integers/src/lib.rs","byte_start":2859,"byte_end":2866,"line_start":71,"line_end":71,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":25}}],"macro_refs":[],"relations":[]}